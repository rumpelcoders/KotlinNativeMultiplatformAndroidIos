apply plugin: 'com.android.library'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-multiplatform'

ext.serialization_version = '0.6.1'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        // iPhone simulator    : presets.iosX64
        // real iDevice 32 bit : presets.iosArm32
        // real iDevice 64 bit : presets.iosArm64
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation("io.ktor:ktor-client-core:${rootProject.ext.ktor_version}")
            implementation("io.ktor:ktor-client-json-native:${rootProject.ext.ktor_version}")
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${rootProject.ext.serializer_version}"
            implementation "com.soywiz.korlibs.klock:klock:1.7.3"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            api "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
            api "com.android.support:support-media-compat:${rootProject.ext.supportLibVersion}"
            implementation("io.ktor:ktor-client-android:${rootProject.ext.ktor_version}")
            implementation("io.ktor:ktor-client-gson:${rootProject.ext.ktor_version}")
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${rootProject.ext.serializer_version}"
        }

        iosMain.dependencies {
            implementation "io.ktor:ktor-client-ios:${rootProject.ext.ktor_version}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${rootProject.ext.serializer_version}"
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

}

tasks.build.dependsOn packForXCode
